#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const semver = require('semver');
const chalk = require('chalk');
const inquirer = require('inquirer');
const vusion = require('vusion-api');
const configurator = require('../lib/config');
const utils = require('../lib/utils');
const cli = vusion.cli;
const querystring = require('querystring');

const cwd = process.cwd();
const pkgPath = path.resolve(cwd, 'package.json');
if (!fs.existsSync(pkgPath)) {
    console.error('[ERROR] Not a npm package');
    console.error('Please locate into a npm package directory.');
    process.exit(1);
}
let pkg = require(pkgPath);

/**
 * Parse Commands
 */
const program = require('commander');
program
    .usage('<version>')
    .option('--tag <tag>', 'Registers the published package with the given tag')
    .option('--access <public|restricted>', 'Tells the registry whether this package should be published as public or restricted.')
    .option('--manager <manager>', 'Change publish manager. For example: --manager cnpm')
    .option('--registry <url>', 'Use custom registry if manager default registry is not you want. For example: --registry https://registry.npm.taobao.org')
    .option('--skip-npm', 'Skip npm publish. Useful when package published but error happened')
    .parse(process.argv);

const name = pkg.name;
const currentVersion = pkg.version;
let version = program.args[0] && semver.clean(program.args[0]);
// const config = configurator.load();

// const manager = program.manager || config.publish_manager;
// const registry = program.registry || config.registries[config.publish_manager];

async function publish() {
    console.info(`  Package ${chalk.yellow(name)}`);
    console.info('  Current version: ' + chalk.cyan(currentVersion));

    if (!version) {
        const arr = currentVersion.split('.');
        const choices = [
            { name: 'patch', value: [arr[0], arr[1], +arr[2] + 1].join('.') },
            { name: 'minor', value: [arr[0], +arr[1] + 1, 0].join('.') },
            { name: 'major', value: [+arr[0] + 1, 0, 0].join('.') },
        ];
        choices.forEach((choice) => choice.name += ' - ' + choice.value);

        const { newVersion } = await inquirer.prompt([{
            type: 'list',
            name: 'newVersion',
            message: `Which version do you want to publish?`,
            choices,
        }]);

        version = newVersion;
    }

    const message = `      New version: ${chalk.cyan(version)}`;
    console.info(message);
    console.info('-'.repeat(32));

    const { yes } = await inquirer.prompt([{
        name: 'yes',
        type: 'confirm',
        message: 'Make sure to continue',
    }]);

    if (!yes)
        return;

    pkg.version = version;

    // const npmCmds = [`${/^win/.test(process.platform) ? manager + '.cmd' : manager} publish`];
    // if (program.tag)
    //     npmCmds.push(`--tag ${program.tag}`);

    // if (program.access)
    //     npmCmds.push(`--access ${program.access}`);
    // else if (pkg.name.includes('/'))
    //     npmCmds.push(`--access public`);

    // if (program.registry)
    //     npmCmds.push(`--registry ${registry}`);

    try {
        if (pkg.vusion && (pkg.vusion.type === 'component' || pkg.vusion.type === 'block' || pkg.vusion.type === 'template')) {
            if (pkg.vusion.type !== 'template') {
                // 兼容老版，以后私有库可能有用
                const staticUrl = await utils.getPlatformStatic();
                pkg.homepage = `${staticUrl}/${pkg.name}@${pkg.version}/index.html`;
            }

            await fs.writeFile(pkgPath, JSON.stringify(pkg, null, 2) + '\n');

            // run prepublishOnly after version updated
            if (pkg.scripts.prepublishOnly)
                await cli.exec('npm run prepublishOnly');

            const usagePath = path.resolve(cwd, 'usage.json');
            if (!fs.existsSync(usagePath)) {
                console.error('[ERROR] Not contain usage.json');
                console.error('Please check prepublishOnly cmd');
                process.exit(1);
            }
            const usage = JSON.parse(await fs.readFile(usagePath, 'utf8'));

            // Only handle nos
            // !program.skipNpm && await cli.exec(npmCmds.join(' ')); // prepublishOnly

            pkg = JSON.parse(await fs.readFile(pkgPath, 'utf8'));

            const { symbol, version, jsonSchema, depDescription, labels, screenShot } = usage;
            // format majorVersion / minorVersion
            const [majorVersion, ...minorVersion] = version.split('.');
            // format screenShot
            const fnScreenShot = Array.isArray(screenShot) ? screenShot.join(',') : screenShot;
            // format JsonSchema
            const fnJsonSchema = typeof jsonSchema === 'string' ? JSON.parse(jsonSchema) : (jsonSchema || {
                attrs: [],
                slots: [],
                blocks: [],
                events: [],
                children: [],
            });
            if (!fnJsonSchema.attrs) {
                fnJsonSchema.attrs = [];
            }
            if (!fnJsonSchema.slots) {
                fnJsonSchema.slots = [];
            }
            if (!fnJsonSchema.blocks) {
                fnJsonSchema.blocks = JSON.stringify([]);
            } else if (typeof fnJsonSchema.blocks !== 'string') {
                fnJsonSchema.blocks = JSON.stringify(fnJsonSchema.blocks);
            }
            if (!fnJsonSchema.screenShot) {
                fnJsonSchema.screenShot = fnScreenShot;
            } else if (Array.isArray(fnJsonSchema.screenShot)) {
                fnJsonSchema.screenShot = fnJsonSchema.screenShot.join(',');
            }
            if (!fnJsonSchema.name) {
                fnJsonSchema.name = symbol;
            }
            if (!fnJsonSchema.title) {
                fnJsonSchema.title = usage.name;
            }
            if (!fnJsonSchema.description) {
                fnJsonSchema.description = usage.description;
            }
            if (!fnJsonSchema.events) {
                fnJsonSchema.events = [];
            }
            if (!fnJsonSchema.children) {
                fnJsonSchema.children = [];
            }
            // format depDescription
            let fnDepDescription;
            if (!depDescription) {
                fnDepDescription = JSON.stringify([]);
            } else if (!Array.isArray(depDescription)) {
                fnDepDescription = JSON.stringify(Object.values(depDescription));
            } else if (typeof depDescription !== 'string') {
                fnDepDescription = JSON.stringify(depDescription);
            }
            // format labels
            let fnLabels = labels;
            if (!Array.isArray(labels)) {
                fnLabels = [labels].filter((i) => i);
            }
            // format platformVersion
            const platformVersion = '1';
            const model = {
                symbol,
                name: usage.name,
                description: usage.description,
                icon: usage.icon,
                jsonSchema: JSON.stringify(fnJsonSchema),
                manual: usage.manual || '',
                document: usage.homepage || '',
                updateLog: usage.updateLog || '',
                repoAddr: usage.repoAddr || '',
                industry: usage.industry || '',
                scenes: usage.scenes || fnJsonSchema.category,
                screenShot: fnScreenShot,
                labels: fnLabels,
                scope: usage.scope || 'pc',
                depDescription: fnDepDescription,
                majorVersion,
                minorVersion: minorVersion.join('.'),
                downloadMethod: usage.downloadMethod || 'npm',
                type: 'extendComponent',
                subType: '',
                platformVersion,
            };

            const pfAxios = await utils.getPlatformAxios();
            const authorization = await utils.getAuthorization();
            const apiVersion = configurator.get('api_version') || 'v2';
            if (apiVersion === 'v1') {
                const { data = {} } = await pfAxios.get('/api/v1/assetdsl/unpub/list', {
                    params: {
                        platformVersion,
                        symbol,
                    },
                    headers: {
                        Cookie: `authorization=${authorization}`,
                    },
                }) || {};
                const { result } = data;
                if (result.count) {
                    await pfAxios.post('/api/v1/assetdsl/update', {
                        symbol: model.symbol,
                        name: model.name,
                        description: model.description,
                        type: model.type,
                        subType: model.subType,
                        platformVersion: model.platformVersion,
                        jsonSchema: model.jsonSchema,
                        depDescription: model.depDescription,
                        dsl: model.dsl,
                    }, {
                        headers: {
                            Cookie: `authorization=${authorization}`,
                        },
                    });
                } else {
                    await pfAxios.post('/api/v1/assetdsl/add', {
                        symbol: model.symbol,
                        editName: model.name,
                        editDesc: model.description,
                        editType: model.type,
                        editSubType: model.subType,
                        platformVersion: model.platformVersion,
                        jsonSchema: model.jsonSchema,
                        depDescription: model.depDescription,
                        dsl: model.dsl,
                    }, {
                        headers: {
                            Cookie: `authorization=${authorization}`,
                        },
                    });
                }
                await pfAxios.post('/api/v1/assetdsl/publish', {
                    symbol: model.symbol,
                    name: model.name,
                    description: model.description,
                    icon: model.icon,
                    type: model.type,
                    industry: model.industry,
                    scenes: model.scenes,
                    scope: model.scope,
                    publishPlatformVersion: model.platformVersion,
                    publishMajorVersion: model.majorVersion,
                    publishMinorVersion: model.minorVersion,
                    screenShot: model.screenShot,
                    downloadMethod: model.downloadMethod,
                    labels: model.labels,
                    manual: model.manual,
                    document: model.document,
                    updateLog: model.updateLog,
                    repoAddr: model.repoAddr,
                }, {
                    headers: {
                        Cookie: `authorization=${authorization}`,
                    },
                });
            } else {
                await pfAxios.post('/api/v1/asset-center/component/publish', {
                    symbol: model.symbol,
                    name: model.name,
                    description: model.description,
                    icon: model.icon,
                    type: 'extend',
                    industry: model.industry,
                    scenes: model.scenes,
                    jsonSchema: model.jsonSchema,
                    version: `${model.majorVersion}.${model.minorVersion}`,
                    picture: model.screenShot,
                    manual: model.manual,
                }, {
                    headers: {
                        Cookie: `authorization=${authorization}`,
                    },
                });
            }
            cli.done('Successfully registered package on lcap platform.');
            console.info();

            if (pkg.scripts.deploy)
                await cli.exec('npm run deploy');

            console.info();
            cli.done('Successfully published!');
        } else { // 普通 publish
            await fs.writeFile(pkgPath, JSON.stringify(pkg, null, 2) + '\n');
            if (pkg.scripts.prepublishOnly)
                await cli.exec('npm run prepublishOnly');

            const usagePath = path.resolve(cwd, 'usage.json');
            if (!fs.existsSync(usagePath)) {
                console.error('[ERROR] Not contain usage.json');
                console.error('Please check prepublishOnly cmd');
                process.exit(1);
            }
            const authorization = await utils.getAuthorization();
            const pfAxios = await utils.getPlatformAxios();
            const usage = JSON.parse(await fs.readFile(usagePath, 'utf8'));
            const versionList = usage.version.split('.')[0];
            const result = await pfAxios.post('/api/v1/asset-center/library/upload', querystring.stringify({
                symbol: usage.name,
                name: usage.title,
                description: usage.description,
                majorVersion: versionList[0],
                minorVersion: versionList[1] + '.' + versionList[2],
                version: usage.version,
                jsonSchema: JSON.stringify(usage, null, 2),
                origin: 'lcap',
            }), {
                headers: {
                    Cookie: `authorization=${authorization}`,
                },
            });
            let answers = null;
            if (!result.data.success) {
                answers = await inquirer.prompt([{
                    name: 'continue',
                    type: 'confirm',
                    default: false,
                    message: `${result.data.msg},继续发布将替换当前版本资源,是否继续`,
                }]);
            }
            if (!answers || answers && answers.continue) {
                if (pkg.scripts.deploy)
                    await cli.exec('npm run deploy');
            } else {
                // throw new Error('相同版本停止发布');
            }
            // Only handle nos
            // !program.skipNpm && await cli.exec(npmCmds.join(' ')); // prepublishOnly
            cli.done('Successfully published!');
        }
    } catch (e) {
        cli.error('Failed to publish!');
        e && console.error(e.response ? e.response.data : e);
        process.exit(1);
    }
}

publish();
